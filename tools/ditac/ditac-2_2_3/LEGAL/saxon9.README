   This is Saxon-HE 9.3.0.11

   More information:
   http://www.saxonica.com/documentation/about/whatis.xml

                                 What is Saxon?

   The Saxon package is a collection of tools for processing XML
   documents. The main components are:
     * An XSLT 2.0 processor, which can be used from the command line, or
       invoked from an application, using a supplied API. This can also be
       used to run XSLT 1.0 stylesheets.
     * An XPath 2.0 processor accessible to applications via a supplied
       API.
     * An XQuery 1.0 processor that can be used from the command line, or
       invoked from an application by use of a supplied API.
     * An XML Schema 1.0 processor. This can be used on its own to
       validate a schema for correctness, or to validate a source document
       against the definitions in a schema. It is also used to support the
       schema-aware functionality of the XSLT and XQuery processors. Like
       the other tools, it can be run from the command line, or invoked
       from an application.
     * As well as providing full implementations of the stable
       specifications listed above, Saxon also has a track record of early
       implementation of forthcoming standards. Saxon 9.3 offers a
       complete implementation of XQuery Updates and a near-complete
       implementation of XML Schema 1.1, both of which are in the final
       stages of standardization. It also implements many features from
       the forthcoming XSLT 3.0, XQuery 3.0, and XPath 3.0 working drafts
       which are still at an earlier stage of development.
     * On the Java platform, when using XSLT, XPath, or XML schema
       validation, Saxon offers a choice of APIs. If you need portability
       across different vendor's tools, you can use the JAXP API for XSLT,
       XPath, and XML Schema processing, and the XQJ interface for XQuery.
       On the other hand, if you want a more integrated and complete API
       offering access to all Saxon's facilities, the s9api interface is
       recommended. You can also dive down deeper into the Saxon internals
       if you need to: there has been no particular attempt to make
       interfaces private, and all public interfaces are documented in the
       JavaDoc. Clearly, the deeper you go, the greater the risk of
       interfaces changing in future releases.
     * On the .NET platform, Saxon offers an API that enables close
       integration with other services available from .NET, notably the
       XML-related classes in the System.Xml namespace. It isn't possible
       to use Saxon as a transparent plug-in replacement for the
       System.Xml.Xsl processor, because the API for the Microsoft engine
       using concrete classes rather than abstract interfaces. However, it
       is possible to use it as a functional replacement with minor
       changes to your application code.

   Full details of Saxon's conformance to the specifications are provided
   in the Conformance section.

   In addition, Saxon provides an extensive library of extensions, all
   implemented in conformance with the XSLT and XQuery Recommendations to
   ensure that portable stylesheets and queries can be written. These
   include the EXSLT extension libraries common, sets, math, and
   dates-and-times. Many of these extensions were pioneered in Saxon and
   have since become available in other products.

   These extension functions are in general accessible from XQuery and
   XPath as well as XSLT, except where they depend on stylesheet
   information. Many extensions are available in Saxon-PE only, and some
   only in Saxon-EE.
