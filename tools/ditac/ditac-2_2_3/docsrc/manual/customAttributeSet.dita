<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN"
"http://docs.oasis-open.org/dita/dtd/task.dtd">
<task id="customAttributeSet">
  <title>Customizing the look of the PDF files generated by ditac</title>

  <abstract>We'll explain how to customize the look of the PDF files generated
  by ditac by using an example. Let's suppose we want to render topic titles
  in a nice dark blue color rather than in black.</abstract>

  <taskbody>
    <context>A PDF file is created by converting the XSL-FO file generated by
    the ditac XSLT 2.0 stylesheet by the means of an XSL-FO processor such as
    Apache FOP, RenderX XEP or Antenna House Formatter. Therefore we need to
    generate a custom XSL-FO file. This is done by creating a very simple
    variant of the stock XSLT stylesheet which generates XSL-FO.</context>

    <steps>
      <step>
        <cmd>Create a custom XSLT stylesheet importing the stock one.</cmd>

        <info>The stock (topmost) XSLT stylesheets are:<dl>
            <dlentry>
              <dt><filepath><varname>ditac_install_dir</varname>/xsl/fo/fo.xsl</filepath></dt>

              <dd>Used to generate an intermediate XSL-FO file. After that,
              the XSL-FO file is converted to PDF <indexterm>PDF, output
              format</indexterm>, PostScript <indexterm>PostScript, output
              format</indexterm>, RTF <indexterm>RTF, output
              format</indexterm>, WordprocessingML
              <indexterm>WordprocessingML, output format</indexterm>, Office
              Open XML (<tt>.docx</tt>) <indexterm>Office Open XML, output
              format</indexterm> or OpenOffice (<tt>.odt</tt>)
              <indexterm>OpenOffice, output format</indexterm> by the means of
              an XSL-FO processor.</dd>
            </dlentry>

            <dlentry>
              <dt><filepath><varname>ditac_install_dir</varname>/xsl/xhtml/xhtml.xsl</filepath></dt>

              <dd>Used to generate XHTML 1.0<indexterm>XHTML 1.0, output
              format</indexterm> pages.</dd>
            </dlentry>

            <dlentry>
              <dt><filepath><varname>ditac_install_dir</varname>/xsl/xhtml/xhtml1_1.xsl</filepath></dt>

              <dd>Used to generate XHTML 1.1<indexterm>XHTML 1.1, output
              format</indexterm> pages.</dd>
            </dlentry>

            <dlentry>
              <dt><filepath><varname>ditac_install_dir</varname>/xsl/xhtml/html.xsl</filepath></dt>

              <dd>Used to generate HTML 4.1<indexterm>HTML 4.1, output
              format</indexterm> pages.</dd>
            </dlentry>

            <dlentry>
              <dt><filepath><varname>ditac_install_dir</varname>/xsl/webhelp/webhelp.xsl</filepath></dt>

              <dd>Used to generate Web Help <indexterm>Web Help, output
              format</indexterm> files, which are then compiled using <xref
              format="html" href="http://www.xmlmind.com/whc.shtml"
              scope="external">XMLmind Web Help Compiler</xref>.</dd>
            </dlentry>

            <dlentry>
              <dt><filepath><varname>ditac_install_dir</varname>/xsl/htmlhelp/htmlhelp.xsl</filepath></dt>

              <dd>Used to generate HTML Help <indexterm>HTML Help, output
              format</indexterm> files, which are then compiled using
              <filepath>hhc.exe</filepath>.</dd>
            </dlentry>

            <dlentry>
              <dt><filepath><varname>ditac_install_dir</varname>/xsl/eclipsehelp/eclipsehelp.xsl</filepath></dt>

              <dd>Used to generate Eclipse Help<indexterm>Eclipse Help, output
              format</indexterm> files.</dd>
            </dlentry>

            <dlentry>
              <dt><filepath><varname>ditac_install_dir</varname>/xsl/javahelp/javahelp.xsl</filepath></dt>

              <dd>Used to generate <tm tmtype="tm">Java</tm>
              Help<indexterm>Java Help, output format</indexterm> files, which
              are then archived in a <tt>.jar</tt> file.</dd>
            </dlentry>

            <dlentry>
              <dt><filepath><varname>ditac_install_dir</varname>/xsl/epub/epub.xsl</filepath></dt>

              <dd>Used to generate EPUB<indexterm>EPUB, output
              format</indexterm> files, which are then archived in a
              <tt>.epub</tt> file (Zip archive having a <tt>.epub</tt>
              extension).</dd>
            </dlentry>
          </dl></info>

        <stepxmp>Initial contents of the custom XSLT stylesheet (a copy of
        this file is found in <xref format="css"
        href="customize/custom_fo.xsl" scope="external"/>).<pre>&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:fo="http://www.w3.org/1999/XSL/Format"
                version="2.0"&gt;

  <b>&lt;xsl:import href="ditac-xsl:fo/fo.xsl"/&gt;</b>

&lt;/xsl:stylesheet&gt;</pre><p>Notice the funny looking URI
        "<tt>ditac-xsl:fo/fo.xsl</tt>". "<tt>ditac-xsl:</tt>" is an easy way
        to refer to
        <filepath><varname>ditac_install_dir</varname>/xsl/</filepath>. This
        works because the XML catalog used by the <cmdname>ditac</cmdname>
        command-line utility (found in
        <filepath><varname>ditac_install_dir</varname>/schema/catalog.xml</filepath>)
        contains:</p><pre>&lt;rewriteURI uriStartString="ditac-xsl:" rewritePrefix="../xsl/" /&gt;</pre></stepxmp>
      </step>

      <step>
        <cmd>Redefine one or more named <tt>xsl:attribute-set</tt>s in your
        custom XSLT stylesheet.</cmd>

        <info>Named <tt>xsl:attribute-set</tt>s are not documented yet. For
        more information, you'll have to refer to the XSLT stylesheets found
        in
        <filepath><varname>ditac_install_dir</varname>/xsl/fo/</filepath>.</info>

        <stepxmp><pre>&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:fo="http://www.w3.org/1999/XSL/Format"
                version="2.0"&gt;

  &lt;xsl:import href="ditac-xsl:fo/fo.xsl"/&gt;

  &lt;xsl:attribute-set name="topic-title" use-attribute-sets="topic-title"&gt;
    <b>&lt;xsl:attribute name="color"&gt;#403480&lt;/xsl:attribute&gt;</b>
    &lt;xsl:attribute name="font-size"&gt;160%&lt;/xsl:attribute&gt;
    &lt;xsl:attribute name="padding-bottom"&gt;0.05em&lt;/xsl:attribute&gt;
    <b>&lt;xsl:attribute name="border-bottom"&gt;0.5pt solid #403480&lt;/xsl:attribute&gt;</b>
    &lt;xsl:attribute name="space-before.optimum"&gt;1.5em&lt;/xsl:attribute&gt;
    &lt;xsl:attribute name="space-before.minimum"&gt;1.2em&lt;/xsl:attribute&gt;
    &lt;xsl:attribute name="space-before.maximum"&gt;1.8em&lt;/xsl:attribute&gt;
  &lt;/xsl:attribute-set&gt;

&lt;/xsl:stylesheet&gt;</pre></stepxmp>
      </step>

      <step>
        <cmd>Specify the "<tt><xref
        href="commandLine.dita#commandLine/option-xslt">-t</xref>
        customize/custom_fo.xsl</tt>" option<indexterm>-t,
        option<index-sort-as>t</index-sort-as></indexterm> when running
        ditac.</cmd>

        <stepxmp><screen>$ ditac -t customize/custom_fo.xsl \
    out/manual.pdf manual.ditamap</screen></stepxmp>

        <tutorialinfo>Alternatively add the following <xref
        href="commandLine.dita#commandLine/option-xslt2"><option>-xslt2</option></xref>
        options<indexterm>-xslt2,
        option<index-sort-as>xslt2</index-sort-as></indexterm> to <xref
        href="commandLine.dita#commandLine/ditac_options_file">your
        ditac.options file</xref>.<pre>-xslt2 pdf <i>absolute_filename_of_custom_fo.xsl</i>
-xslt2 ps <i>absolute_filename_of_custom_fo.xsl</i>
-xslt2 rtf <i>absolute_filename_of_custom_fo.xsl</i>
-xslt2 wml <i>absolute_filename_of_custom_fo.xsl</i>
-xslt2 docx <i>absolute_filename_of_custom_fo.xsl</i>
-xslt2 odt <i>absolute_filename_of_custom_fo.xsl</i></pre></tutorialinfo>
      </step>
    </steps>
  </taskbody>
</task>
