<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
"http://docs.oasis-open.org/dita/dtd/topic.dtd">
<topic id="embed2">
  <title>Low-level method: embedding
  <apiname>com.xmlmind.ditac.preprocess.PreProcessor</apiname></title>

  <body>
    <p>This method consists in first invoking the <xref format="html"
    href="../api/com/xmlmind/ditac/preprocess/PreProcessor.html"
    scope="external">PreProcessor</xref> in order to pre-process the DITA
    source files into a <filepath>ditac_lists.ditac_lists</filepath> file and
    one or more <filepath>.ditac</filepath> files; then invoking the <xref
    format="html" href="http://saxon.sourceforge.net/"
    scope="external">Saxon</xref> XSLT 2.0 engine in order to transform all
    the <filepath>.ditac</filepath> files.</p>

    <p>For some output formats, PDF, RTF, etc, the final third step consists
    in invoking an XSL-FO processor such as <xref format="html"
    href="http://xmlgraphics.apache.org/fop/" scope="external">Apache
    FOP</xref> in order to convert the XSL-FO generated by the XSLT
    stylesheets to the desired output format.</p>

    <p>The full source code of the <apiname>Embed2</apiname> sample is found
    in <xref format="java" href="embed/Embed2.java"
    scope="external"><filepath>Embed2.java</filepath></xref>.</p>

    <ol>
      <li><p>Invoke the ditac <apiname>PreProcessor</apiname> to pre-process
      the DITA source files into a
      <filepath>ditac_lists.ditac_lists</filepath> file and one or more
      <filepath>.ditac</filepath> files.</p><ol>
          <li><p>Create and configure the
          <apiname>PreProcessor</apiname>.</p><pre>Console console = new Console() {
    public void showMessage(String message, MessageType messageType) {
        System.err.println(message);
    }
};

PreProcessor preProc = new PreProcessor(console);
preProc.setChunking(Chunking.SINGLE);
preProc.setMedia(Media.SCREEN);

ImageCopier imageCopier = new ImageCopier();
imageCopier.parseParameters("img");
preProc.setImageHandler(imageCopier);</pre><ul>
              <li><p><xref format="html"
              href="../api/com/xmlmind/util/Console.html"
              scope="external">Console</xref> is a very simple interface.
              Implementing this interface allows to do whatever you want with
              the messages reported by a
              <apiname>PreProcessor</apiname>.</p></li>

              <li><p>Specifiying <xref format="html"
              href="../api/com/xmlmind/ditac/preprocess/PreProcessor.html#setChunking(com.xmlmind.ditac.preprocess.Chunking)"
              scope="external"><codeph>preProc.setChunking(Chunking.SINGLE)</codeph></xref>
              allows to generate a single HTML page using a DITA map designed
              to generate multiple HTML pages.</p></li>

              <li><p>A <apiname>PreProcessor</apiname> is not concerned about
              the <i>exact</i> output format. However its behaves differently
              depending on the target <xref format="html"
              href="../api/com/xmlmind/ditac/preprocess/Media.html"
              scope="external">Media</xref>.</p></li>

              <li><p>A <apiname>PreProcessor</apiname> handles to an <xref
              format="html"
              href="../api/com/xmlmind/ditac/preprocess/ImageHandler.html"
              scope="external">ImageHandler</xref> all the images files
              referenced in the DITA source using relative URLs. An
              <apiname>ImageHandler</apiname> is registered with a
              <apiname>PreProcessor</apiname> using method <xref format="html"
              href="../api/com/xmlmind/ditac/preprocess/PreProcessor.html#setImageHandler(com.xmlmind.ditac.preprocess.ImageHandler)"
              scope="external">setImageHandler</xref>.</p><p>In the case of
              the <apiname>Embed2</apiname> sample, we use the simplest
              possible <apiname>ImageHandler</apiname> which is <xref
              format="html"
              href="../api/com/xmlmind/ditac/convert/ImageCopier.html"
              scope="external">ImageCopier</xref>.</p></li>
            </ul></li>

          <li><p>Pre-process the DITA source files.</p><pre>URL inFileURL = null;
try {
    inFileURL = inFile.toURI().toURL();
} catch (MalformedURLException cannotHappen) {}

File[] preProcFiles = null;
try {
    preProcFiles = preProc.process(new URL[] { inFileURL }, outFile);
} catch (IOException e) {
    console.showMessage(e.toString(), Console.MessageType.ERROR);
}
if (preProcFiles == null) {
    return false;
}</pre><p>The <xref format="html"
          href="../api/com/xmlmind/ditac/preprocess/PreProcessor.html#process(java.net.URL[],%20java.io.File)"
          scope="external">process</xref> method of a PreProcessor returns
          <codeph>null</codeph> if an error other than an
          <apiname>IOException</apiname> has caused the pre-processing to
          fail. When this is the case, errors messages are displayed on the
          <apiname>Console</apiname>.</p><p>Note that a
          <apiname>PreProcessor</apiname> is not thread-safe. Each thread must
          own its <apiname>PreProcessor</apiname>. However, the
          <apiname>process</apiname> method of a
          <apiname>PreProcessor</apiname> may be invoked several
          times.</p></li>
        </ol></li>

      <li><p>Invoke the Saxon XSLT 2.0 engine, in order to transform all the
      <filepath>.ditac</filepath> files. Note that this is done using the
      standard <xref format="html"
      href="http://java.sun.com/j2ee/1.4/docs/tutorial/doc/JAXPIntro.html"
      scope="external">JAXP</xref> API.</p><ol>
          <li><p>Pass <i>required system parameters</i> to the XSLT
          stylesheets, in addition to the normal, user, parameters.</p><pre>String ditacListsURI = "";

int count = preProcFiles.length;
for (int i = 0; i &lt; count; ++i) {
    File ditacFile = preProcFiles[i];

    if (ditacFile.getPath().endsWith(".ditac_lists")) {
        ditacListsURI = ditacFile.toURI().toASCIIString();
        break;
    }
}

String[] params = {
    "ditacListsURI", ditacListsURI,
    "xsl-resources-directory", "res",
    "use-note-icon", "yes",
    "default-table-width", "100%"
};</pre><p>These required system parameters are:</p><ul>
              <li><xref
              href="xsltParams.dita#xsltParams/ditacListsURI">ditacListsURI</xref>,
              always required.</li>

              <li><xref
              href="xsltParams.dita#xsltParams/foProcessor">foProcessor</xref>,
              required by the XSLT stylesheets that generate XSL-FO.</li>

              <li><xref
              href="xsltParams.dita#xsltParams/chmBasename">chmBasename</xref>,
              <xref
              href="xsltParams.dita#xsltParams/hhpBasename">hhpBasename</xref>,
              required by the XSLT stylesheets that generate HTML Help.</li>
            </ul></li>

          <li><p>Use the Saxon XSLT 2.0 engine to create a
          <apiname>TransformerFactory</apiname>, then configure this
          <apiname>TransformerFactory</apiname>.</p><pre>private static
TransformerFactory createTransformerFactory(URIResolver uriResolver, 
                                            ErrorListener errorListener) 
    throws Exception {
    Class&lt;?&gt; cls = Class.forName("net.sf.saxon.TransformerFactoryImpl");
    TransformerFactory transformerFactory = 
        (TransformerFactory) cls.newInstance();

    ExtensionFunctions.registerAll(transformerFactory);

    transformerFactory.setURIResolver(uriResolver);
    transformerFactory.setErrorListener(errorListener);

    return transformerFactory;
}</pre><ul>
              <li><p id="saxon_9_2_plus">Creating an instance of Saxon 9.2+ is
              absolutely needed. XMLmind DITA Converter is not designed to
              work with any other XSLT engine (e.g. the Xalan XSLT 1.0 engine,
              which is part of the <tm tmtype="tm">Java</tm>
              runtime).</p></li>

              <li><p>The ditac XSLT 2.0 stylesheets make use of a few XSLT
              extension functions written in <tm tmtype="tm">Java</tm>. These
              extension functions must be registered with Saxon. This is done
              using <xref format="html"
              href="../api/com/xmlmind/ditac/xslt/ExtensionFunctions.html#registerAll(javax.xml.transform.TransformerFactory)"
              scope="external">ExtensionFunctions.registerAll</xref>.</p></li>
            </ul></li>

          <li><p>Create and configure a
          <apiname>Transformer</apiname>.</p><pre>private static Transformer createTransformer(String[] params, 
                                             Console console) 
    throws Exception {
    URIResolver uriResolver = Resolve.createURIResolver();
    ErrorListener errorListener = new ConsoleErrorListener(console);

    TransformerFactory factory = createTransformerFactory(uriResolver,
                                                          errorListener);

    File xslFile = new File(path("../../../xsl/xhtml/html.xsl"));
    Transformer transformer = 
        factory.newTransformer(new StreamSource(xslFile));

    transformer.setURIResolver(uriResolver);
    transformer.setErrorListener(errorListener);

    for (int i = 0; i &lt; params.length; i += 2) {
        transformer.setParameter(params[i], params[i+1]);
    }

    return transformer;
}</pre><ul>
              <li><p><xref format="html"
              href="../api/com/xmlmind/ditac/util/Resolve.html"
              scope="external">Resolve</xref> is a helper class making it easy
              to use the services of <xref format="html"
              href="http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=entity"
              scope="external">XML Catalog resolvers</xref>.</p><p>By default,
              <apiname>Resolve</apiname> automatically loads all the XML
              catalogs specified using the <tt>xml.catalog.files</tt> <tm
              tmtype="tm">Java</tm> system property. Excerpts of the
              <cmdname>ant</cmdname> <xref format="xml" href="embed/build.xml"
              scope="external">build.xml</xref> file:</p><pre>&lt;target name="embed2" depends="compile,clean_embed2"&gt;
  &lt;java classpathref="cp" fork="yes" classname="Embed2"&gt;
    <b>&lt;sysproperty key="xml.catalog.files" 
                 value="${ditac.dir}/schema/catalog.xml" /&gt;</b>
    &lt;arg value="${ditac.dir}/docsrc/manual/manual.ditamap" /&gt;
    &lt;arg value="manual.html" /&gt;
  &lt;/java&gt;
&lt;/target&gt;</pre><p>However, static method <xref format="html"
              href="../api/com/xmlmind/ditac/util/Resolve.html#setResolverFactory(com.xmlmind.ditac.util.ResolverFactory)"
              scope="external">setResolverFactory</xref> allows to configure
              this thread-safe utility class (used by ditac in many places)
              differently.</p></li>

              <li><p><xref format="html"
              href="../api/com/xmlmind/ditac/convert/ConsoleErrorListener.html"
              scope="external">ConsoleErrorListener</xref> is an
              implementation of <apiname>ErrorListener</apiname> which
              displays its messages on a <apiname>Console</apiname>. </p></li>
            </ul></li>

          <li><p>Invoke the Transformer to transform each
          <filepath>.ditac</filepath> file.</p><pre>for (int i = 0; i &lt; count; ++i) {
    File ditacFile = preProcFiles[i];

    String ditacFilePath = ditacFile.getPath();
    if (ditacFilePath.endsWith(".ditac")) {
        File transformedFile = new File(
            ditacFilePath.substring(0, ditacFilePath.length()-5) + 
            "html");

        try {
            transformer.transform(new StreamSource(ditacFile), 
                                  new StreamResult(transformedFile));
        } catch (Exception e) {
            console.showMessage(e.toString(), 
                                Console.MessageType.ERROR);
            cleanUp(preProcFiles);
            return false;
        }
    }
}</pre><p>In the case of <apiname>Embed2</apiname>, the above loop is not
          strictly needed. We specified
          <codeph>preProc.setChunking(Chunking.SINGLE)</codeph> and therefore
          the <apiname>PreProcessor</apiname> generates a single
          <tt>.ditac</tt> file.</p></li>
        </ol></li>

      <li><p>Copy the resources of the XSLT stylesheets (CSS stylesheets,
      icons, etc) to output subdirectory <filepath>res/</filepath>. Note that
      the images referenced in the DITA source, if any, have already been
      copied to output subdirectory <filepath>img/</filepath> by the
      <apiname>ImageCopier</apiname>.</p><pre>File dstDir = new File("res");
if (!dstDir.exists()) {
    File srcDir = new File(path("../../../xsl/xhtml/resources"));
    try {
        FileUtil.copyDir(srcDir, dstDir, false);
    } catch (IOException e) {
        console.showMessage(e.toString(), Console.MessageType.ERROR);
        cleanUp(preProcFiles);
        return false;
    }
}</pre></li>

      <li><p>Delete the <filepath>ditac_lists.ditac_lists</filepath> and
      <filepath>.ditac</filepath> files.</p><pre>cleanUp(preProcFiles);</pre></li>
    </ol>

    <section><title>Compiling and executing the <apiname>Embed2</apiname>
    sample</title><p>Compile the <apiname>Embed2</apiname> sample by running
    <cmdname>ant</cmdname> in
    <filepath><varname>ditac_install_dir</varname>/doc/manual/embed/</filepath>.</p><p>Execute
    the <apiname>Embed2</apiname> sample by running
    <cmdname>ant</cmdname> <tt>embed2</tt> in
    <filepath><varname>ditac_install_dir</varname>/doc/manual/embed/</filepath>.
    This will convert
    <filepath><varname>ditac_install_dir</varname>/docsrc/manual/manual.ditamap</filepath>
    to single HTML 4.1 page
    <filepath><varname>ditac_install_dir</varname>/doc/manual/embed/manual.html</filepath>.</p><p>Note
    that <filepath>Embed2.java</filepath> contains ``hardwired filenames''.
    This means that this sample cannot be run from elsewhere than
    <filepath><varname>ditac_install_dir</varname>/doc/manual/embed/</filepath>.</p></section>
  </body>

  <related-links>
    <link href="howItWorks.dita#howItWorks/how_it_works">
      <linktext/>
    </link>

    <link href="embed1.dita">
      <linktext/>
    </link>
  </related-links>
</topic>
